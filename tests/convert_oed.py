#!/bin/en
get_ipython().run_line_magic('load_ext', 'autoreload')
get_ipython().run_line_magic('autoreload', '2')

import os 
import sys
import pandas as pd

def find_csv(target_dir):
    dirs_found = []
    for root, directory, files in os.walk(target_dir):
        if valid_example(files):
            dirs_found.append(root)
    return dirs_found        

def valid_example(files_list):
    return (len(set(RI_FILES_LIST) - set(files_list)) == 0)

def get_defined_cols(csv_filename):
    csv_df = pd.read_csv(csv_filename)
    csv_df.fillna(0, inplace=True)
    return csv_df.loc[:, (csv_df != 0).any(axis=0)].columns.tolist()

def find_all_defined_cols(target_dir):
    col_dict = dict()
    for file_type in RI_FILES_LIST:
        col_dict[file_type] = set()

    valid_examples = find_csv(target_dir)
    for example in valid_examples:
        print('-------------------------------------------------')
        for file_type in RI_FILES_LIST:
            f_name = "{}/{}".format(example, file_type)
            found_cols = get_defined_cols(f_name)
            col_dict[file_type] =  col_dict[file_type].union(found_cols)
            print("\n" + f_name)
            print(found_cols)
    return col_dict

def writre_new_oed(oed_file, in_df, write_dir_path):
    prefix = 'oed-update'
    oed_cols = FILE_MAP[oed_file]['columns']
    oed_map  = FILE_MAP[oed_file]['mapping'] 

    # Create Empry DataFrame
    rows = len(in_df)
    cols = len(oed_cols)
    init_data = pd.np.zeros((rows, cols), dtype=int)
    #init_data = pd.np.empty((rows, cols,)) * pd.np.nan
    out_df = pd.DataFrame(init_data, columns=oed_cols)

#    for key in list(oed_map.keys()):
    for key in in_df.columns.tolist():
        # Columnn name unchanged
        if key in oed_cols:
            out_df[key] = in_df[key]
        # Rename column
        elif key in list(oed_map.keys()):
            out_df[oed_map[key]] = in_df[key]
        else:
            print('Failed to find map for: file="{}", column="{}"'.format(oed_file,key))
            #return None

    out_df = out_df[oed_cols] # Reorder columns
    out_df.to_csv(
        '{}/{}'.format(write_dir_path, oed_file),
        encoding='utf-8',
        header=True,
        index=False,
    )

def run_oed_update(source_dir, destination_dir):
    examples_to_update = find_csv(source_dir)
    
    for oed_dir in examples_to_update:
        write_base_dir = oed_dir.replace(source_dir, destination_dir) 
        print(write_base_dir)
        
        if os.path.isdir(write_base_dir):
            print('Dir exisits - Abort')
            continue
        else:
            os.makedirs(write_base_dir)
            for oed_file in RI_FILES_LIST:
                current_oed_df = pd.read_csv("{}/{}".format(oed_dir, oed_file)) 
                writre_new_oed(oed_file, current_oed_df, write_base_dir)



RI_FILES_LIST = ['ri_scope.csv',
                'location.csv',
                'account.csv',
                'ri_info.csv']
## Account
acc_mapping = {
  'PortfolioNumber'    : 'PortNumber',
  'AccountNumber'      : 'AccNumber',
  'PolicyNumber'       : 'PolNumber',
  'PerilCode'          : 'AccPeril',
  'Ded6'               : 'AccDed6All',
  'Limit6'             : 'AccLimit6All',
  'AttachmentPoint'    : 'LayerAttachment',
  'CondLimit6'         : 'CondLimit6All',
  'CondMinDed6'        : 'CondMinDed6All',
  'ConditionName'      : 'CondName',
  'ConditionNumber'    : 'CondNumber',
  'DedType6'           : 'AccDedType6All',
  'LimitType6'         : 'AccLimitType6All',
  'MinDed6'            : 'AccMinDed6All',
  'PolicyLimit'        : 'LayerLimit',
  'PolicyParticipation': 'LayerParticipation',
}


all_acc_cols = [
    'PortNumber',
    'PortName',
    'PortNotes',
    'AccNumber',
    'AccName',
    'AccGroup',
    'AccStatus',
    'ExpiringAccNumber',
    'CedantName',
    'AccCurrency',
    'AccUserDef1',
    'AccUserDef2',
    'AccUserDef3',
    'AccUserDef4',
    'AccUserDef5',
    'AccPeril',
    'AccDedCode1Building',
    'AccDedType1Building',
    'AccDed1Building',
    'AccMinDed1Building',
    'AccMaxDed1Building',
    'AccDedCode2Other',
    'AccDedType2Other',
    'AccDed2Other',
    'AccMinDed2Other',
    'AccMaxDed2Other',
    'AccDedCode3Contents',
    'AccDedType3Contents',
    'AccDed3Contents',
    'AccMinDed3Contents',
    'AccMaxDed3Contents',
    'AccDedCode4BI',
    'AccDedType4BI',
    'AccDed4BI',
    'AccMinDed4BI',
    'AccMaxDed4BI',
    'AccDedCode5PD',
    'AccDedType5PD',
    'AccDed5PD',
    'AccMinDed5PD',
    'AccMaxDed5PD',
    'AccDedCode6All',
    'AccDedType6All',
    'AccDed6All',
    'AccMinDed6All',
    'AccMaxDed6All',
    'AccLimitCode1Building',
    'AccLimitType1Building',
    'AccLimit1Building',
    'AccLimitCode2Other',
    'AccLimitType2Other',
    'AccLimit2Other',
    'AccLimitCode3Contents',
    'AccLimitType3Contents',
    'AccLimit3Contents',
    'AccLimitCode4BI',
    'AccLimitType4BI',
    'AccLimit4BI',
    'AccLimitCode5PD',
    'AccLimitType5PD',
    'AccLimit5PD',
    'AccLimitCode6All',
    'AccLimitType6All',
    'AccLimit6All',
    'PolNumber',
    'PolStatus',
    'PolInceptionDate',
    'PolExpiryDate',
    'ProducerName',
    'Underwriter',
    'BranchName',
    'LOB',
    'ExpiringPolNumber',
    'PolPerilsCovered',
    'PolGrossPremium',
    'PolTax',
    'PolBrokerage',
    'PolNetPremium',
    'LayerNumber',
    'LayerParticipation',
    'LayerLimit',
    'LayerAttachment',
    'HoursClause',
    'PolPeril',
    'PolDedCode1Building',
    'PolDedType1Building',
    'PolDed1Building',
    'PolMinDed1Building',
    'PolMaxDed1Building',
    'PolDedCode2Other',
    'PolDedType2Other',
    'PolDed2Other',
    'PolMinDed2Other',
    'PolMaxDed2Other',
    'PolDedCode3Contents',
    'PolDedType3Contents',
    'PolDed3Contents',
    'PolMinDed3Contents',
    'PolMaxDed3Contents',
    'PolDedCode4BI',
    'PolDedType4BI',
    'PolDed4BI',
    'PolMinDed4BI',
    'PolMaxDed4BI',
    'PolDedCode5PD',
    'PolDedType5PD',
    'PolDed5PD',
    'PolMinDed5PD',
    'PolMaxDed5PD',
    'PolDedCode6All',
    'PolDedType6All',
    'PolDed6All',
    'PolMinDed6All',
    'PolMaxDed6All',
    'PolLimitCode1Building',
    'PolLimitType1Building',
    'PolLimit1Building',
    'PolLimitCode2Other',
    'PolLimitType2Other',
    'PolLimit2Other',
    'PolLimitCode3Contents',
    'PolLimitType3Contents',
    'PolLimit3Contents',
    'PolLimitCode4BI',
    'PolLimitType4BI',
    'PolLimit4BI',
    'PolLimitCode5PD',
    'PolLimitType5PD',
    'PolLimit5PD',
    'PolLimitCode6All',
    'PolLimitType6All',
    'PolLimit6All',
    'StepFunctionName',
    'StepTriggerType',
    'StepNumber',
    'StartTriggerBuilding',
    'EndTriggerBuilding',
    'DeductibleBuilding',
    'PayOutBuilding',
    'StartTriggerContent',
    'EndTriggerContent',
    'DeductibleContent',
    'PayOutContent',
    'StartTriggerBuildingContent',
    'EndTriggerBuildingContent',
    'DeductibleBuildingContent',
    'PayOutBuildingContent',
    'MinimumTIV',
    'ScaleFactor',
    'IsLimitAtDamage',
    'PolUserDef1',
    'PolUserDef2',
    'PolUserDef3',
    'PolUserDef4',
    'PolUserDef5',
    'CondNumber',
    'CondName',
    'CondPeril',
    'CondDedCode1Building',
    'CondDedType1Building',
    'CondDed1Building',
    'CondMinDed1Building',
    'CondMaxDed1Building',
    'CondDedCode2Other',
    'CondDedType2Other',
    'CondDed2Other',
    'CondMinDed2Other',
    'CondMaxDed2Other',
    'CondDedCode3Contents',
    'CondDedType3Contents',
    'CondDed3Contents',
    'CondMinDed3Contents',
    'CondMaxDed3Contents',
    'CondDedCode4BI',
    'CondDedType4BI',
    'CondDed4BI',
    'CondMinDed4BI',
    'CondMaxDed4BI',
    'CondDedCode5PD',
    'CondDedType5PD',
    'CondDed5PD',
    'CondMinDed5PD',
    'CondMaxDed5PD',
    'CondDedCode6All',
    'CondDedType6All',
    'CondDed6All',
    'CondMinDed6All',
    'CondMaxDed6All',
    'CondLimitCode1Building',
    'CondLimitType1Building',
    'CondLimit1Building',
    'CondLimitCode2Other',
    'CondLimitType2Other',
    'CondLimit2Other',
    'CondLimitCode3Contents',
    'CondLimitType3Contents',
    'CondLimit3Contents',
    'CondLimitCode4BI',
    'CondLimitType4BI',
    'CondLimit4BI',
    'CondLimitCode5PD',
    'CondLimitType5PD',
    'CondLimit5PD',
    'CondLimitCode6All',
    'CondLimitType6All',
    'CondLimit6All']

loc_mapping = {
    'AccountNumber' : 'AccNumber',
    'LocationNumber': 'LocNumber',
    'Ded6'          : 'LocDed6All',
    'Limit6'        : 'LocLimit6All',
    'BuildingTIV'   : 'BuildingTIV',
    'OtherTIV'      : 'OtherTIV',
    'ContentsTIV'   : 'ContentsTIV',
    'BITIV'         : 'BITIV',
    'ConditionTag'  : 'CondTag',
    'CountryISO'    : 'CountryCode',
    'Ded1'          : 'LocDed1Building',
    'Ded2'          : 'LocDed2Other',
    'Ded3'          : 'LocDed3Contents',
    'Ded6'          : 'LocDed6All',
    'DedCode1'      : 'LocDedCode1Building',
    'Limit1'        : 'LocLimit1Building',
    'Limit2'        : 'LocLimit2Other',
    'Limit3'        : 'LocLimit3Contents',
    'Limit4'        : 'LocLimit4BI',
    'Limit6'        : 'LocLimit6All',
}


all_loc_cols = [
    'AccNumber',
    'LocNumber',
    'LocName',
    'LocGroup',
    'IsPrimary',
    'IsTenant',
    'BuildingID',
    'LocInceptionDate',
    'LocExpiryDate',
    'PercentComplete',
    'CompletionDate',
    'CountryCode',
    'Latitude',
    'Longitude',
    'StreetAddress',
    'PostalCode',
    'City',
    'SubArea2',
    'SubArea',
    'LowResCresta',
    'HighResCresta',
    'AreaCode',
    'AreaName',
    'AddressMatch',
    'GeocodeQuality',
    'Geocoder',
    'OrgOccupancyScheme',
    'OrgOccupancyCode',
    'OrgConstructionScheme',
    'OrgConstructionCode',
    'OccupancyCode',
    'ConstructionCode',
    'YearBuilt',
    'NumberOfStories',
    'NumberOfBuildings',
    'FloorArea',
    'FloorAreaUnit',
    'LocUserDef1',
    'LocUserDef2',
    'LocUserDef3',
    'LocUserDef4',
    'LocUserDef5',
    'LocPerilsCovered',
    'BuildingTIV',
    'OtherTIV',
    'ContentsTIV',
    'BITIV',
    'BIPOI',
    'LocCurrency',
    'LocGrossPremium',
    'LocTax',
    'LocBrokerage',
    'LocNetPremium',
    'NonCatGroundUpLoss',
    'LocParticipation',
    'PayoutBasis',
    'ReinsTag',
    'CondTag',
    'CondPriority',
    'LocDedCode1Building',
    'LocDedType1Building',
    'LocDed1Building',
    'LocMinDed1Building',
    'LocMaxDed1Building',
    'LocDedCode2Other',
    'LocDedType2Other',
    'LocDed2Other',
    'LocMinDed2Other',
    'LocMaxDed2Other',
    'LocDedCode3Contents',
    'LocDedType3Contents',
    'LocDed3Contents',
    'LocMinDed3Contents',
    'LocMaxDed3Contents',
    'LocDedCode4BI',
    'LocDedType4BI',
    'LocDed4BI',
    'LocMinDed4BI',
    'LocMaxDed4BI',
    'LocDedCode5PD',
    'LocDedType5PD',
    'LocDed5PD',
    'LocMinDed5PD',
    'LocMaxDed5PD',
    'LocDedCode6All',
    'LocDedType6All',
    'LocDed6All',
    'LocMinDed6All',
    'LocMaxDed6All',
    'LocLimitCode1Building',
    'LocLimitType1Building',
    'LocLimit1Building',
    'LocLimitCode2Other',
    'LocLimitType2Other',
    'LocLimit2Other',
    'LocLimitCode3Contents',
    'LocLimitType3Contents',
    'LocLimit3Contents',
    'LocLimitCode4BI',
    'LocLimitType4BI',
    'LocLimit4BI',
    'LocLimitCode5PD',
    'LocLimitType5PD',
    'LocLimit5PD',
    'LocLimitCode6All',
    'LocLimitType6All',
    'LocLimit6All',
    'BIWaitingPeriod',
    'LocPeril',
    'YearUpgraded',
    'SurgeLeakage',
    'SprinklerType',
    'RoofCover',
    'RoofYearBuilt',
    'RoofGeometry',
    'RoofEquipment',
    'RoofFrame',
    'RoofMaintenance',
    'BuildingCondition',
    'RoofAttachedStructure',
    'RoofDeck',
    'RoofPitch',
    'RoofAnchorage',
    'RoofDeckAttachment',
    'RoofCoverAttachment',
    'GlassType',
    'LatticeType',
    'FloodZone',
    'SoftStory',
    'Basement',
    'BasementLevelCount',
    'WindowProtection',
    'FoundationType',
    'WallAttachedStructure',
    'AppurtenantStructure',
    'ConstructionQuality',
    'GroundEquipment',
    'EquipmentBracing',
    'Flashing',
    'BuildingShape',
    'ShapeIrregularity',
    'Pounding',
    'Ornamentation',
    'SpecialEQConstruction',
    'Retrofit',
    'CrippleWalls',
    'FoundationConnection',
    'ShortColumn',
    'Fatigue',
    'Cladding',
    'BIPreparedness',
    'BIRedundancy',
    'BuildingElevation',
    'BuildingElevationUnit',
    'Datum',
    'GroundElevation',
    'GroundElevationUnit',
    'Tank',
    'Redundancy',
    'InternalPartition',
    'ExternalDoors',
    'Torsion',
    'MechanicalEquipmentSide',
    'ContentsWindVuln',
    'ContentsFloodVuln',
    'ContentsQuakeVuln',
    'SmallDebris',
    'FloorsOccupied',
    'FloodDefenseElevation',
    'FloodDefenseElevationUnit',
    'FloodDebrisResilience',
    'BaseFloodElevation',
    'BaseFloodElevationUnit',
    'BuildingHeight',
    'BuildingHeightUnit',
    'BuildingValuation',
    'TreeExposure',
    'Chimney',
    'BuildingType',
    'Packaging',
    'Protection',
    'SalvageProtection',
    'ValuablesStorage',
    'DaysHeld',
    'BrickVeneer',
    'FEMACompliance',
    'CustomFloodSOP',
    'CustomFloodZone',
    'MultiStoryHall',
    'BuildingExteriorOpening',
    'ServiceEquipmentProtection',
    'TallOneStory',
    'TerrainRoughness',
    'NumberOfEmployees',
    'Payroll']

info_mapping = {
  'OccurenceAttachmentPoint' : 'OccAttachment',
  'RiskAttachmentPoint'      : 'RiskAttachment',
  'PlacementPercent'         : 'PlacedPercent',
  'TreatyPercent'            : 'TreatyShare',
}

all_info_cols = [
    'ReinsNumber',
    'ReinsLayerNumber',
    'ReinsName',
    'ReinsPerilCode',
    'ReinsInceptionDate',
    'ReinsExpiryDate',
    'CededPercent',
    'RiskLimit',
    'RiskAttachment',
    'OccLimit',
    'OccAttachment',
    'OccurenceFranchiseDed',
    'OccurenceReverseFranchise',
    'AggregateLimit',
    'AggregateAttachmentPoint',
    'ReinsCurrency',
    'InuringPriority',
    'ReinsType',
    'AttachmentBasis',
    'ReinstatementNumber',
    'ReinstatementCharge',
    'ReinsPremium',
    'ReinsHoursClause',
    'PlacedPercent',
    'DeemedPercentPlaced',
    'ReinsFXrate',
    'TreatyShare',
    'UseReinsDates']

scope_mapping = {
    'AccountNumber'     : 'AccNumber',
    'LocationNumber'    : 'LocNumber',
    'PolicyNumber'      : 'PolNumber',
    'PortfolioNumber'   : 'PortNumber',
}

all_scope_cols = [
    'ReinsNumber',
    'PortNumber',
    'AccNumber',
    'PolNumber',
    'LocationGroup',
    'LocNumber',
    'CedantName',
    'ProducerName',
    'LOB',
    'CountryCode',
    'ReinsuranceTag',
    'CededPercent',
    'RiskLevel']

FILE_MAP = {
    'account.csv': {
        'mapping': acc_mapping,
        'columns': all_acc_cols,
    },
    'location.csv': {
        'mapping': loc_mapping,
        'columns': all_loc_cols,
    },
    'ri_info.csv': {
        'mapping': info_mapping,
        'columns': all_info_cols,
    },
    'ri_scope.csv': {
        'mapping': scope_mapping,
        'columns': all_scope_cols,
    },
}
